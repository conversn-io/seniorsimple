'use client'

import { useState, useEffect } from 'react';
import { QuizProgress } from './QuizProgress';
import { QuizQuestion } from './QuizQuestion';
import { QuizResults } from './QuizResults';
import { OTPVerification } from './OTPVerification';
import { ProcessingState } from './ProcessingState';
import { supabase } from '@/lib/supabase';

interface QuizAnswer {
  [key: string]: any;
}

type FunnelType = 'primary' | 'secondary';

// Primary funnel for investors with assets
const PRIMARY_QUIZ_QUESTIONS = [
  {
    id: 'investableAssets',
    title: 'Do you have a minimum of at least $100,000 or more in investable assets?',
    subtitle: 'This includes savings, investments, 401k, IRA, and other assets (not including primary residence)',
    type: 'multiple-choice' as const,
    options: [
      'Yes, I have $100,000 or more',
      'No, I have less than $100,000'
    ],
    isQualifying: true,
  },
  {
    id: 'retirementTimeline',
    title: 'How soon are you planning to retire?',
    subtitle: 'This helps us recommend the right investment strategy',
    type: 'multiple-choice' as const,
    options: [
      'Already retired',
      'Within 1-2 years',
      '3-5 years',
      '6-10 years',
      'More than 10 years'
    ],
  },
  {
    id: 'currentRetirementPlans',
    title: 'What type of retirement plans are you investing in now?',
    subtitle: 'Select all that apply to your current situation',
    type: 'multi-select' as const,
    options: [
      '401(k) or 403(b)',
      'Traditional IRA',
      'Roth IRA',
      'Personal savings/investments',
      'Pension plan',
      'Real estate investments',
      'No current retirement investments'
    ],
  },
  {
    id: 'retirementSavings',
    title: 'How much money do you have saved up for retirement?',
    subtitle: 'Total from all retirement accounts and investments',
    type: 'multiple-choice' as const,
    options: [
      '$1,000,000+',
      '$750,000 - $999,999',
      '$500,000 - $749,999',
      '$250,000 - $499,999',
      '$100,000 - $249,999'
    ],
  },
  {
    id: 'retirementConcerns',
    title: 'What is your greatest concern during retirement?',
    subtitle: 'Understanding your priorities helps us provide better guidance',
    type: 'multiple-choice' as const,
    options: [
      'Running out of money',
      'Healthcare costs',
      'Inflation reducing purchasing power',
      'Market volatility affecting investments',
      'Leaving money for heirs',
      'Maintaining current lifestyle'
    ],
  },
  {
    id: 'personalInfo',
    title: 'Personal Information',
    subtitle: 'Help us personalize your retirement strategy',
    type: 'personal-info' as const,
  },
  {
    id: 'location',
    title: 'Location Information',
    subtitle: 'State regulations affect available investment options',
    type: 'location-info' as const,
  },
  {
    id: 'phone',
    title: 'SMS Verified Cell Phone Number',
    subtitle: 'We\'ll send you a verification code to ensure secure communication',
    type: 'phone-consent' as const,
  },
];

// Secondary funnel for those with less assets
const SECONDARY_QUIZ_QUESTIONS = [
  {
    id: 'retirementTimeline',
    title: 'How soon are you planning to retire?',
    subtitle: 'This helps us recommend the right investment strategy',
    type: 'multiple-choice' as const,
    options: [
      'Already retired',
      'Within 1-2 years',
      '3-5 years',
      '6-10 years',
      'More than 10 years'
    ],
  },
  {
    id: 'currentRetirementPlans',
    title: 'What type of retirement plans are you investing in now?',
    subtitle: 'Select all that apply to your current situation',
    type: 'multi-select' as const,
    options: [
      '401(k) or 403(b)',
      'Traditional IRA',
      'Roth IRA',
      'Personal savings/investments',
      'Pension plan',
      'Real estate investments',
      'No current retirement investments'
    ],
  },
  {
    id: 'retirementSavings',
    title: 'How much money do you have saved up for retirement?',
    subtitle: 'Total from all retirement accounts and investments',
    type: 'multiple-choice' as const,
    options: [
      '$50,000 - $99,999',
      '$25,000 - $49,999',
      '$10,000 - $24,999',
      'Less than $10,000',
      'No retirement savings yet'
    ],
  },
  {
    id: 'retirementConcerns',
    title: 'What is your greatest concern during retirement?',
    subtitle: 'Understanding your priorities helps us provide better guidance',
    type: 'multiple-choice' as const,
    options: [
      'Running out of money',
      'Healthcare costs',
      'Inflation reducing purchasing power',
      'Market volatility affecting investments',
      'Leaving money for heirs',
      'Maintaining current lifestyle'
    ],
  },
  {
    id: 'personalInfo',
    title: 'Personal Information',
    subtitle: 'Help us personalize your retirement strategy',
    type: 'personal-info' as const,
  },
  {
    id: 'location',
    title: 'Location Information',
    subtitle: 'State regulations affect available investment options',
    type: 'location-info' as const,
  },
  {
    id: 'phone',
    title: 'SMS Verified Cell Phone Number',
    subtitle: 'We\'ll send you a verification code to ensure secure communication',
    type: 'phone-consent' as const,
  },
];

export const AnnuityQuiz = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [answers, setAnswers] = useState<QuizAnswer>({});
  const [funnelType, setFunnelType] = useState<FunnelType>('primary');
  const [showResults, setShowResults] = useState(false);
  const [showOTP, setShowOTP] = useState(false);
  const [showProcessing, setShowProcessing] = useState(false);
  const [quizSessionId, setQuizSessionId] = useState<string | null>(null);

  const questions = funnelType === 'primary' ? PRIMARY_QUIZ_QUESTIONS : SECONDARY_QUIZ_QUESTIONS;
  const totalSteps = questions.length;

  useEffect(() => {
    // Initialize tracking - simplified for now
    console.log('Annuity Quiz Started');
  }, []);

  const handleAnswer = (answer: any) => {
    const currentQuestion = questions[currentStep];
    
    // Handle funnel routing
    if (currentQuestion.id === 'investableAssets') {
      if (answer === 'No, I have less than $100,000') {
        setFunnelType('secondary');
        setCurrentStep(0); // Reset to first question of secondary funnel
        setAnswers({});
        return;
      }
    }

    // Handle phone number submission - go directly to OTP
    if (currentQuestion.id === 'phone') {
      setAnswers(prev => ({ ...prev, [currentQuestion.id]: answer }));
      setShowOTP(true);
      return;
    }

    // Store answer and move to next step
    setAnswers(prev => ({ ...prev, [currentQuestion.id]: answer }));
    
    // Track step completion
    console.log('Quiz step completed:', currentStep + 1, currentQuestion.id, answer);

    // Check if this is the last question
    if (currentStep === questions.length - 1) {
      // Quiz completed, show results
      setShowResults(true);
      calculateResults();
    } else {
      setCurrentStep(prev => prev + 1);
    }
  };

  const calculateResults = () => {
    // Calculate projected monthly income based on answers
    const retirementSavings = answers.retirementSavings;
    let projectedMonthlyIncomeMin = 0;
    let projectedMonthlyIncomeMax = 0;

    // Simple calculation based on retirement savings
    switch (retirementSavings) {
      case '$1,000,000+':
        projectedMonthlyIncomeMin = 4000;
        projectedMonthlyIncomeMax = 6000;
        break;
      case '$750,000 - $999,999':
        projectedMonthlyIncomeMin = 3000;
        projectedMonthlyIncomeMax = 4500;
        break;
      case '$500,000 - $749,999':
        projectedMonthlyIncomeMin = 2000;
        projectedMonthlyIncomeMax = 3500;
        break;
      case '$250,000 - $499,999':
        projectedMonthlyIncomeMin = 1000;
        projectedMonthlyIncomeMax = 2500;
        break;
      case '$100,000 - $249,999':
        projectedMonthlyIncomeMin = 500;
        projectedMonthlyIncomeMax = 1500;
        break;
      default:
        projectedMonthlyIncomeMin = 300;
        projectedMonthlyIncomeMax = 800;
    }

    const calculatedResults = {
      projected_monthly_income_min: projectedMonthlyIncomeMin,
      projected_monthly_income_max: projectedMonthlyIncomeMax
    };

    // Track quiz completion
    console.log('Quiz completed:', answers, calculatedResults);

    return calculatedResults;
  };

  const handleOTPVerification = async () => {
    setShowOTP(false);
    setShowProcessing(true);
    
    // Submit quiz to database
    await submitQuizToDatabase();
  };

  const submitQuizToDatabase = async () => {
    try {
      const calculatedResults = calculateResults();
      
      const leadData = {
        contact_info: {
          first_name: answers.firstName,
          last_name: answers.lastName,
          email: answers.email,
          phone: answers.phone,
          zip_code: answers.zipCode
        },
        quiz_answers: answers,
        calculated_results: calculatedResults,
        lead_score: 75, // Default lead score
      };

      // For now, just log the data - we'll implement proper submission later
      console.log('Lead data to submit:', leadData);

      setShowProcessing(false);
      setShowResults(true);
    } catch (error) {
      console.error('Error submitting quiz to database:', error);
      setShowProcessing(false);
      setShowResults(true);
    }
  };

  const handleRestart = () => {
    setCurrentStep(0);
    setAnswers({});
    setFunnelType('primary');
    setShowResults(false);
    setShowOTP(false);
    setShowProcessing(false);
    setQuizSessionId(null);
  };

  if (showProcessing) {
    return <ProcessingState message="Processing your information..." />;
  }

  if (showOTP) {
    return (
      <OTPVerification
        phoneNumber={answers.phone}
        onVerificationComplete={handleOTPVerification}
        onBack={() => setShowOTP(false)}
      />
    );
  }

  if (showResults) {
    return (
      <QuizResults
        answers={answers}
        onRestart={handleRestart}
      />
    );
  }

  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      <QuizProgress currentStep={currentStep} totalSteps={totalSteps} />
      <div className="bg-white rounded-lg shadow-lg p-8 mt-6">
        <QuizQuestion
          question={questions[currentStep]}
          onAnswer={handleAnswer}
          currentAnswer={answers[questions[currentStep].id]}
        />
      </div>
    </div>
  );
};

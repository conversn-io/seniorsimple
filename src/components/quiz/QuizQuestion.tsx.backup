'use client'

import { useState } from 'react';

interface QuizQuestionProps {
  question: {
    id: string;
    title: string;
    subtitle?: string;
    type: 'multiple-choice' | 'multi-select' | 'slider' | 'input' | 'phone-consent' | 'personal-info' | 'location-info' | 'address-info';
    options?: string[];
    min?: number;
    max?: number;
    step?: number;
    defaultValue?: number | string;
    placeholder?: string;
    isQualifying?: boolean;
  };
  onAnswer: (answer: any) => void;
  currentAnswer?: any;
  isLoading?: boolean;
}

export const QuizQuestion = ({ question, onAnswer, currentAnswer, isLoading }: QuizQuestionProps) => {
  const [selectedAnswer, setSelectedAnswer] = useState<any>(currentAnswer || question.defaultValue);
  const [selectedAnswers, setSelectedAnswers] = useState<string[]>(currentAnswer || []);
  const [sliderValue, setSliderValue] = useState(question.defaultValue as number || question.min || 0);
  const [consentChecked, setConsentChecked] = useState(false);
  
  // Personal info fields
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [email, setEmail] = useState('');
  
  // Location info fields
  const [address, setAddress] = useState('');
  const [city, setCity] = useState('');
  const [state, setState] = useState('');
  const [zipCode, setZipCode] = useState('');

  const handleMultipleChoice = (answer: string) => {
    setSelectedAnswer(answer);
    onAnswer(answer);
  };

  const handleMultiSelect = (answer: string) => {
    const newAnswers = selectedAnswers.includes(answer)
      ? selectedAnswers.filter(a => a !== answer)
      : [...selectedAnswers, answer];
    setSelectedAnswers(newAnswers);
    onAnswer(newAnswers);
  };

  const handleSliderChange = (value: number) => {
    setSliderValue(value);
    onAnswer(value);
  };

  const handlePersonalInfoSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (firstName && lastName && email) {
      onAnswer({
        firstName,
        lastName,
        email
      });
    }
  };

  const handleLocationInfoSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (address && city && state && zipCode) {
      onAnswer({
        address,
        city,
        state,
        zipCode
      });
    }
  };

  const handlePhoneSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const phoneInput = (e.target as HTMLFormElement).phone as HTMLInputElement;
    if (phoneInput.value && consentChecked) {
      onAnswer(phoneInput.value);
    }
  };

  const renderQuestion = () => {
    switch (question.type) {
      case 'multiple-choice':
        return (
          <div className="space-y-4">
            {question.options?.map((option, index) => (
              <button
                key={index}
                onClick={() => handleMultipleChoice(option)}
                className={`w-full p-4 text-left border-2 rounded-lg transition-all duration-200 ${
                  selectedAnswer === option 
                    ? 'border-[#36596A] bg-[#36596A] text-white' 
                    : 'border-gray-300 hover:border-[#36596A] hover:bg-gray-50'
                }`}
                disabled={isLoading}
              >
                <span className="text-lg font-medium">{option}</span>
              </button>
            ))}
          </div>
        );

      case 'multi-select':
        return (
          <div className="space-y-4">
            {question.options?.map((option, index) => (
              <button
                key={index}
                onClick={() => handleMultiSelect(option)}
                className={`w-full p-4 text-left border-2 rounded-lg transition-all duration-200 flex items-center justify-between ${
                  selectedAnswers.includes(option) 
                    ? 'border-[#36596A] bg-[#36596A] text-white' 
                    : 'border-gray-300 hover:border-[#36596A] hover:bg-gray-50'
                }`}
                disabled={isLoading}
              >
                <span className="text-lg font-medium">{option}</span>
                <div className={`w-6 h-6 rounded border-2 flex items-center justify-center ${
                  selectedAnswers.includes(option) 
                    ? 'border-white bg-white text-[#36596A]' 
                    : 'border-gray-400'
                }`}>
                  {selectedAnswers.includes(option) && <span>âœ“</span>}
                </div>
              </button>
            ))}
          </div>
        );

      case 'slider':
        return (
          <div className="space-y-4">
            <div className="text-center">
              <div className="text-3xl font-bold text-[#36596A]">${sliderValue.toLocaleString()}</div>
            </div>
            <input
              type="range"
              min={question.min}
              max={question.max}
              step={question.step}
              value={sliderValue}
              onChange={(e) => handleSliderChange(Number(e.target.value))}
              className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
              disabled={isLoading}
            />
            <div className="flex justify-between text-sm text-gray-600">
              <span>${question.min?.toLocaleString()}</span>
              <span>${question.max?.toLocaleString()}</span>
            </div>
          </div>
        );

      case 'personal-info':
        return (
          <form onSubmit={handlePersonalInfoSubmit} className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                First Name *
              </label>
              <input
                type="text"
                value={firstName}
                onChange={(e) => setFirstName(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#36596A] focus:border-transparent"
                required
                disabled={isLoading}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Last Name *
              </label>
              <input
                type="text"
                value={lastName}
                onChange={(e) => setLastName(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#36596A] focus:border-transparent"
                required
                disabled={isLoading}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Email Address *
              </label>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#36596A] focus:border-transparent"
                required
                disabled={isLoading}
              />
            </div>
            <button
              type="submit"
              className="w-full bg-[#36596A] text-white py-3 px-6 rounded-lg font-medium hover:bg-[#2a4a5a] transition-colors disabled:opacity-50"
              disabled={!firstName || !lastName || !email || isLoading}
            >
              Continue
            </button>
          </form>
        );

      case 'location-info':
        return (
          <form onSubmit={handleLocationInfoSubmit} className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                ZIP Code *
              </label>
              <input
                type="text"
                value={zipCode}
                onChange={(e) => setZipCode(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#36596A] focus:border-transparent"
                placeholder="12345"
                required
                disabled={isLoading}
              />
            </div>
            <button
              type="submit"
              className="w-full bg-[#36596A] text-white py-3 px-6 rounded-lg font-medium hover:bg-[#2a4a5a] transition-colors disabled:opacity-50"
              disabled={!zipCode || isLoading}
            >
              Continue
            </button>
          </form>
        );

      case 'phone-consent':
        return (
          <form onSubmit={handlePhoneSubmit} className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Phone Number *
              </label>
              <input
                type="tel"
                name="phone"
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#36596A] focus:border-transparent"
                placeholder="(555) 123-4567"
                required
                disabled={isLoading}
              />
            </div>
            <div className="flex items-start space-x-3">
              <input
                type="checkbox"
                id="consent"
                checked={consentChecked}
                onChange={(e) => setConsentChecked(e.target.checked)}
                className="mt-1 w-4 h-4 text-[#36596A] border-gray-300 rounded focus:ring-[#36596A]"
                disabled={isLoading}
              />
              <label htmlFor="consent" className="text-sm text-gray-600 leading-relaxed">
                I consent to receive SMS messages and phone calls from SeniorSimple and its partners regarding my retirement planning inquiry. Message and data rates may apply. Reply STOP to opt out.
              </label>
            </div>
            <button
              type="submit"
              className="w-full bg-[#36596A] text-white py-3 px-6 rounded-lg font-medium hover:bg-[#2a4a5a] transition-colors disabled:opacity-50"
              disabled={!consentChecked || isLoading}
            >
              Send Verification Code
            </button>
          </form>
        );

      default:
        return <div>Unsupported question type</div>;
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-2xl font-bold text-gray-900 mb-2">{question.title}</h2>
        {question.subtitle && (
          <p className="text-gray-600 text-lg">{question.subtitle}</p>
        )}
      </div>
      
      {renderQuestion()}
    </div>
  );
};
